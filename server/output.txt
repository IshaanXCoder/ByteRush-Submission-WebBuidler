
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphic To-Do List</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <div class="input-area">
            <input type="text" id="taskInput" placeholder="Add a new task...">
            <button id="addTaskBtn">Add</button>
        </div>
        <ul id="taskList">
            <!-- Tasks will be added here dynamically -->
        </ul>
    </div>
    <script src="script.js"></script>
</body>
</html>


css
/* style.css */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #121212; /* Dark background */
    color: #eee;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
}

.container {
    background-color: #1e1e1e; /* Slightly lighter dark */
    padding: 30px;
    border-radius: 15px;
    box-shadow:  10px 10px 20px #0c0c0c, /* Outer shadow */
                -10px -10px 20px #2a2a2a; /* Inner shadow (for neumorphism) */
    width: 80%;
    max-width: 600px;
}

h1 {
    text-align: center;
    margin-bottom: 30px;
    color: #fff;
}

.input-area {
    display: flex;
    margin-bottom: 20px;
}

#taskInput {
    flex: 1;
    padding: 12px 15px;
    border: none;
    border-radius: 8px;
    background-color: #252525;
    color: #eee;
    margin-right: 10px;
    box-shadow: inset 3px 3px 5px #1a1a1a, /* Inset shadow */
                inset -3px -3px 5px #303030;
    outline: none; /* Remove default focus outline */
}

#addTaskBtn {
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    background-color: #4CAF50; /* Green add button */
    color: white;
    cursor: pointer;
    box-shadow:  3px 3px 5px #1a1a1a,
                -3px -3px 5px #303030;
    transition: background-color 0.3s, transform 0.1s; /* Smooth transition */
}

#addTaskBtn:hover {
    background-color: #388e3c;
}
#addTaskBtn:active {
    transform: scale(0.95); /* Slight scale down on click */
     box-shadow: inset 3px 3px 5px #1a1a1a, /* Inset shadow */
                inset -3px -3px 5px #303030;
}

#taskList {
    list-style: none;
    padding: 0;
}

#taskList li {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
    margin-bottom: 10px;
    background-color: #252525;
    border-radius: 8px;
    box-shadow:  3px 3px 5px #1a1a1a,
                -3px -3px 5px #303030;
    transition: background-color 0.3s, transform 0.2s;
}

#taskList li.completed {
    text-decoration: line-through;
    opacity: 0.7;
}

#taskList li:hover {
    background-color: #2c2c2c;
    transform: translateY(-2px); /* Slight lift on hover */
}

.task-text {
    flex: 1;
    margin-right: 10px;
    word-break: break-word; /* Prevent long words from overflowing */
    cursor: pointer;
}

.buttons {
    display: flex;
    gap: 5px; /* Spacing between buttons */
}

.buttons button {
    padding: 8px 12px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.1s;
}

.buttons .complete-btn {
    background-color: #2196F3; /* Blue complete button */
    color: white;
    box-shadow:  2px 2px 4px #1a1a1a,
                -2px -2px 4px #303030;
}
.buttons .complete-btn:hover{
    background-color: #0d8bf1;
}
.buttons .complete-btn:active{
    transform: scale(0.95);
    box-shadow: inset 2px 2px 4px #1a1a1a,
                inset -2px -2px 4px #303030;
}

.buttons .delete-btn {
    background-color: #f44336; /* Red delete button */
    color: white;
    box-shadow:  2px 2px 4px #1a1a1a,
                -2px -2px 4px #303030;
}
.buttons .delete-btn:hover{
    background-color: #e72d20;
}
.buttons .delete-btn:active{
    transform: scale(0.95);
    box-shadow: inset 2px 2px 4px #1a1a1a,
                inset -2px -2px 4px #303030;
}

.buttons .up-btn, .buttons .down-btn {
    background-color: #777;
    color: white;
    box-shadow:  2px 2px 4px #1a1a1a,
                -2px -2px 4px #303030;
}
.buttons .up-btn:hover, .buttons .down-btn:hover{
    background-color: #666;
}
.buttons .up-btn:active, .buttons .down-btn:active{
    transform: scale(0.95);
    box-shadow: inset 2px 2px 4px #1a1a1a,
                inset -2px -2px 4px #303030;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .container {
        width: 95%;
        padding: 20px;
    }
    .input-area {
        flex-direction: column;
    }
    #taskInput {
        margin-right: 0;
        margin-bottom: 10px;
    }
    #taskList li {
        flex-direction: column;
        align-items: stretch; /* Stretch items to full width */
    }
    .task-text{
        margin-bottom: 10px;
    }
    .buttons {
        justify-content: flex-end; /* Align buttons to the right */
    }
}


javascript
/* script.js */
document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('taskInput');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const taskList = document.getElementById('taskList');

    // Load tasks from local storage
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

    // Function to render tasks
    function renderTasks() {
        taskList.innerHTML = ''; // Clear existing list
        tasks.forEach((task, index) => {
            const li = document.createElement('li');
            li.innerHTML = `
                <span class="task-text ${task.completed ? 'completed' : ''}">${task.text}</span>
                <div class="buttons">
                    <button class="complete-btn">${task.completed ? 'Undo' : 'Done'}</button>
                    <button class="delete-btn">Delete</button>
                    <button class="up-btn">↑</button>
                    <button class="down-btn">↓</button>
                </div>
            `;

            // Event listeners for buttons
            const completeBtn = li.querySelector('.complete-btn');
            const deleteBtn = li.querySelector('.delete-btn');
            const upBtn = li.querySelector('.up-btn');
            const downBtn = li.querySelector('.down-btn');
            const taskText = li.querySelector('.task-text');

            completeBtn.addEventListener('click', () => toggleComplete(index));
            deleteBtn.addEventListener('click', () => deleteTask(index));
            upBtn.addEventListener('click', () => moveTask(index, -1));
            downBtn.addEventListener('click', () => moveTask(index, 1));
            taskText.addEventListener('click', () => toggleComplete(index)); //click on text to complete

            taskList.appendChild(li);
        });
    }

    // Add a new task
    function addTask() {
        const text = taskInput.value.trim();
        if (text) {
            tasks.push({ text, completed: false });
            taskInput.value = '';
            updateLocalStorage();
            renderTasks();
        }
    }

    // Toggle task completion
    function toggleComplete(index) {
        tasks[index].completed = !tasks[index].completed;
        updateLocalStorage();
        renderTasks();
    }

    // Delete a task
    function deleteTask(index) {
        tasks.splice(index, 1);
        updateLocalStorage();
        renderTasks();
    }

    // Move a task up or down
    function moveTask(index, direction) {
        if (index + direction < 0 || index + direction >= tasks.length) return;

        const temp = tasks[index];
        tasks[index] = tasks[index + direction];
        tasks[index + direction] = temp;

        updateLocalStorage();
        renderTasks();
    }

    // Update local storage
    function updateLocalStorage() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    // Event listeners for adding tasks
    addTaskBtn.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTask();
        }
    });

    // Initial render
    renderTasks();
});

 